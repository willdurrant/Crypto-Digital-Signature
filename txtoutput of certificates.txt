Based upon - http://serverfault.com/questions/215606/how-do-i-view-the-details-of-a-digital-certificate-cer-file
http://info.ssl.com/article.aspx?id=12149 (HOWTO: DER vs. CRT vs. CER vs. PEM Certificates and How To Convert Them)
http://how2ssl.com/articles/working_with_pem_files/
http://www.pixelstech.net/article/1408345768-Different-types-of-keystore-in-Java----Overview

General Notes:

Certificates:
	- Certificates are for distributing public keys. Typically this is done using Public Key Infrastructure (PKI) such as the x509 certificate. 
	- At its core an X.509 certificate is a digital document that has been encoded and/or digitally signed according to RFC 5280.
	- There are various x509 certificates extensions i.e. DER, CRT CER.
	- There is a lot of confusion about what DER, PEM, CRT, and CER are and many have incorrectly said that they are all interchangeable.  While in certain cases some can be interchanged the best practice is to identify how your certificate is encoded and then label it correctly.  Correctly labeled certificates will be much easier to manipulate.

CER Files :- The point of the certificate is to distribute the public key. If you distribute the private key, the public key is worthless.

PEM Files:
	- In addition to the standard X509 *.cer certificates there are also certificate files ending with *.PFX or *.P12. The later ones are X509 certs as well, but may in addition contain a private key, too. Password protected, of course.
	- A ".pfx" or ".pem" file is a PKCS#12 archive: a bag which can contain a lot of objects with optional password protection; but, usually, a PKCS#12 archive contains a certificate (possibly with its assorted set of CA certificates) and the corresponding private key.
	- On the other hand, a ".cert" (or ".cer" or ".crt") file usually contains a single certificate, alone and without any wrapping (no private key, no password protection, just the certificate).
	- PEM files can contain a private key and a certificate. This format is designed to be safe for inclusion in ascii or even rich-text documents, such as emails. This means that you can simple copy and paste the content of a pem file to another document and back.
	- A single PEM file can contain a number of certificates and a key, for example, a single file with:
		- Public certificate
		- Intermidiate Certificate
		- Root certificate
		- Private key

	- The following is a sample PEM file containing a private key and a certificate, please note that real certificates are a couple of times larger, containing much more random text between the "BEGIN" and "END" headers.

		-----BEGIN ENCRYPTED PRIVATE KEY-----
		MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDg
		MBQGCCqGSIb3DQMHBAgD1kGN4ZslJgSCBMi1xk9jhlPxPc
		9g73NQbtqZwI+9X5OhpSg/2ALxlCCjbqvzgSu8gfFZ4yo+
		A .... MANY LINES LIKE THAT ....
		X0R+meOaudPTBxoSgCCM51poFgaqt4l6VlTN4FRpj+c/Wc
		blK948UAda/bWVmZjXfY4Tztah0CuqlAldOQBzu8TwE7WD
		H0ga/iLNvWYexG7FHLRiq5hTj0g9mUPEbeTXuPtOkTEb/0
		GEs=
		-----END ENCRYPTED PRIVATE KEY-----
		-----BEGIN CERTIFICATE-----
		MIIDXTCCAkWgAwIBAgIJAJC1HiIAZAiIMA0GCSqGSIb3Df
		BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVx
		aWRnaXRzIFB0eSBMdGQwHhcNMTExMjMxMDg1OTQ0WhcNMT
		A .... MANY LINES LIKE THAT ....
		JjyzfN746vaInA1KxYEeI1Rx5KXY8zIdj6a7hhphpj2E04
		C3Fayua4DRHyZOLmlvQ6tIChY0ClXXuefbmVSDeUHwc8Yu
		B7xxt8BVc69rLeHV15A0qyx77CLSj3tCx2IUXVqRs5mlSb
		vA==
		-----END CERTIFICATE-----


Java Keystores :
	- See http://www.pixelstech.net/article/1408345768-Different-types-of-keystore-in-Java----Overview
	
	
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


>openssl x509 -inform der -in ../certificate-authority/UserCA.cer -noout -text

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1 (0x1)
    Signature Algorithm: sha1WithRSAEncryption
        Issuer: C=Germany, O=FlexiProvider, CN=UserCA
        Validity
            Not Before: Dec  7 18:47:56 2005 GMT
            Not After : Dec  7 18:47:56 2010 GMT
        Subject: C=Germany, O=FlexiProvider, CN=UserCA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:86:7f:ff:49:46:09:6b:d0:64:fd:4e:01:d2:83:
                    ...
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Digital Signature, Non Repudiation, Certificate Sign, CRL Sign
            X509v3 Subject Key Identifier: 
                77:E3:8D:57:8E:43:31:26:31:8A:E8:CA:8B:01:02:6A:F7:39:C8:36
            X509v3 Authority Key Identifier: 
                keyid:77:E3:8D:57:8E:43:31:26:31:8A:E8:CA:8B:01:02:6A:F7:39:C8:36

    Signature Algorithm: sha1WithRSAEncryption
         1e:7a:5a:d0:28:3e:42:af:a4:1f:48:cd:2f:ec:fc:31:18:b6:
	 ...


>openssl x509 -inform der -in CertRSA.cer -noout -text

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2 (0x2)
    Signature Algorithm: sha1WithRSAEncryption
        Issuer: C=Germany, O=FlexiProvider, CN=UserCA
        Validity
            Not Before: Dec  7 18:49:25 2005 GMT
            Not After : Dec  7 18:49:25 2008 GMT
        Subject: C=Germany, O=TUD, CN=CertRSA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (1023 bit)
                Modulus:
                    69:ca:99:a8:54:8b:02:b5:3b:d6:9f:72:a7:c6:47:
                    ...
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Key Usage: critical
                Digital Signature, Non Repudiation
            X509v3 Subject Key Identifier: 
                00:37:8E:AA:81:7C:B4:6E:D1:63:83:0C:AB:99:0B:A8:82:F2:32:A5
            X509v3 Authority Key Identifier: 
                keyid:77:E3:8D:57:8E:43:31:26:31:8A:E8:CA:8B:01:02:6A:F7:39:C8:36
                DirName:/C=Germany/O=FlexiProvider/CN=UserCA
                serial:01

    Signature Algorithm: sha1WithRSAEncryption
         65:67:a1:23:fe:1e:db:93:a2:80:b4:24:e6:7e:b0:72:4b:d1:
	 ...

